import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Component;
import java.util.function.Supplier;

@Component
public class RetryUtil {
    private final ApplicationEventPublisher eventPublisher;

    public RetryUtil(ApplicationEventPublisher eventPublisher) {
        this.eventPublisher = eventPublisher;
    }

    public <T> T executeWithRetry(Supplier<T> operation, String operationId, int maxRetries, long initialDelayMs, double multiplier) {
        int attempts = 0;
        Throwable lastException = null;

        while (attempts < maxRetries) {
            try {
                return operation.get(); // Execute the operation
            } catch (Exception e) {
                attempts++;
                lastException = e;

                // Publish failure event
                eventPublisher.publishEvent(new MethodFailureEvent(
                    operationId,
                    e.getMessage() != null ? e.getMessage() : "Unknown error",
                    e
                ));

                if (attempts < maxRetries) {
                    // Calculate exponential delay: initialDelay * (multiplier ^ (attempts - 1))
                    long delayMs = (long) (initialDelayMs * Math.pow(multiplier, attempts - 1));
                    System.out.println("Attempt " + attempts + " failed. Waiting " + delayMs + "ms before retrying...");

                    try {
                        Thread.sleep(delayMs);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        throw new RuntimeException("Retry interrupted", ie);
                    }
                }
            }
        }

        throw new RuntimeException("Operation failed after " + maxRetries + " attempts", lastException);
    }
}


==

public class MethodFailureEvent {
    private final String operationId;
    private final String errorMessage;
    private final Throwable exception;

    public MethodFailureEvent(String operationId, String errorMessage, Throwable exception) {
        this.operationId = operationId;
        this.errorMessage = errorMessage;
        this.exception = exception;
    }

    public String getOperationId() {
        return operationId;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public Throwable getException() {
        return exception;
    }
}

=======================

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.Optional;

@Component
public class FailureEventHandler {

    private final RetryRepository retryRepository;

    public FailureEventHandler(RetryRepository retryRepository) {
        this.retryRepository = retryRepository;
    }

    @EventListener
    @Transactional
    public void handleFailureEvent(MethodFailureEvent event) {
        // Find or create retry record
        RetryRecord retryRecord = retryRepository.findByOperationId(event.getOperationId())
                .orElse(new RetryRecord(event.getOperationId()));

        // Update retry record
        retryRecord.incrementAttempts();
        retryRecord.setLastError(event.getErrorMessage());
        retryRecord.setLastAttemptTime(LocalDateTime.now());
        retryRecord.setStatus(retryRecord.getAttempts() >= 3 ? "FAILED" : "PENDING_RETRY");

        // Save to database
        retryRepository.save(retryRecord);
    }
}
