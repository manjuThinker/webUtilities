spring:
  kafka:
    bootstrap-servers: tp-kafkatxn-service-01.tx.standardchartered.com:9092,tp-kafkatxn-service-02.tx.standardchartered.com:9092,tp-kafkatxn-service-03.tx.standardchartered.com:9092
    listener:
      topics: car-topic
Updated Properties Class
Nest topics under a Listener subclass and add a getter:

java

Collapse

Wrap

Copy
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "spring.kafka")
public class KafkaProperties {
    private String bootstrapServers; // Comma-separated string
    private Listener listener = new Listener();

    public String getBootstrapServers() { return bootstrapServers; }
    public void setBootstrapServers(String bootstrapServers) { this.bootstrapServers = bootstrapServers; }
    public Listener getListener() { return listener; }
    public void setListener(Listener listener) { this.listener = listener; }

    public static class Listener {
        private String topics;

        public String getTopics() { return topics; }
        public void setTopics(String topics) { this.topics = topics; }
    }
}

========================
1. Start → Scheduler runs every 15 seconds.
2. ↓ Fetch → Query: Get 'pending' OR 'pending retry' where next_retry_time <= now.
3. ↓ Process → Attempt to process each record.
4. ↓ Success? → If yes, set status = 'success', next_retry_time = null, attempt_count = 0.
5. ↓ Failure? → If no, publish FailedEvent with record details.
6. ↓ Event Listener → Catches FailedEvent.
7. ↓ First Failure? → If status = 'pending' and attempt_count = 0:
8. ↓ Set Retry → Set status = 'pending retry', attempt_count = 1, next_retry_time = now + 15s (future time updated here).
9. ↓ Retry Failure? → If status = 'pending retry' and attempt_count > 0:
10. ↓ Check Attempts → If attempt_count < 3:
11. ↓ Update Retry → attempt_count++, next_retry_time = now + (15s * 2^(attempt_count-1)) (future time updated here).
12. ↓ Max Attempts? → If attempt_count = 3, set status = 'failed', next_retry_time = null.
13. ↓ Save → Update record in DB, loop back to scheduler.
=========================================
Direct Answer
Overview
To handle retries for an external API call without blocking threads for hours, especially with exponential backoff delays (15 minutes initially, doubling to 30, 60 minutes, for up to 3 attempts total), you can use Spring’s TaskScheduler for asynchronous scheduling. This ensures the thread is released immediately after failure, and retries are managed by scheduling tasks at the appropriate times, updating the database for each retry.

Initial Setup: Polling and Publishing
Start with your fetchPendingRecords() method, which polls every 10 seconds to fetch "PENDING" records from the database. When records are found, publish them as a PendingRecordsEvent. Another method subscribes to this event, changes the status to "INPROGRESS," and calls the external API using RestTemplate, which might fail.

Example: In StatusUpdateService, use @Scheduled(fixedRate = 10000) to fetch records and publish events:
java

Collapse

Wrap

Copy
@Scheduled(fixedRate = 10000)
@Async
@Transactional
public void fetchPendingRecords() {
    List<Record> pendingRecords = entityManager.createQuery("SELECT r FROM Record r WHERE r.status = :status", Record.class)
            .setParameter("status", "PENDING")
            .getResultList();
    if (!pendingRecords.isEmpty()) {
        eventPublisher.publishEvent(new PendingRecordsEvent(this, pendingRecords));
    }
}
Subscribe in RecordProcessor to change status and call API:
java

Collapse

Wrap

Copy
@EventListener
@Async
@Transactional
public void handlePendingRecords(PendingRecordsEvent event) {
    List<Record> records = event.getRecords();
    for (Record record : records) {
        record.setStatus("INPROGRESS");
        entityManager.merge(record);
        try {
            callExternalApi(record); // This might fail
        } catch (Exception e) {
            // Handle failure: publish event for retry
            eventPublisher.publishEvent(new MethodFailureEvent(record.getId().toString(), e.getMessage(), e));
        }
    }
}
Handling Failures with TaskScheduler
When the API call fails in callExternalApi, publish a MethodFailureEvent. Use TaskScheduler to schedule retries asynchronously, ensuring the thread isn’t blocked. Each retry updates the database, and if all fail, mark as "FAILED."

Configure TaskScheduler:
java

Collapse

Wrap

Copy
@Bean
public ThreadPoolTaskScheduler taskScheduler() {
    ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
    scheduler.setPoolSize(5);
    scheduler.setThreadNamePrefix("retryScheduler-");
    scheduler.initialize();
    return scheduler;
}
Event Handler for Retries:
java

Collapse

Wrap

Copy
@Component
public class FailureEventHandler {
    @Autowired
    private RetryRepository retryRepository;
    @Autowired
    private ThreadPoolTaskScheduler taskScheduler;

    @EventListener
    @Transactional
    public void handleFailureEvent(MethodFailureEvent event) {
        RetryRecord record = retryRepository.findByOperationId(event.getOperationId())
                .orElse(new RetryRecord(event.getOperationId()));
        record.setAttempts(record.getAttempts() + 1);
        record.setLastError(event.getErrorMessage());
        record.setLastAttemptTime(LocalDateTime.now());
        if (record.getAttempts() < 3) { // Max 3 attempts total
            record.setStatus("PENDING_RETRY");
            scheduleNextRetry(event.getOperationId(), record.getAttempts());
        } else {
            record.setStatus("FAILED");
        }
        retryRepository.save(record);
    }

    private void scheduleNextRetry(String operationId, int attempt) {
        long initialDelayMs = 15 * 60 * 1000; // 15 minutes
        double multiplier = 2.0;
        long delayMs = (long) (initialDelayMs * Math.pow(multiplier, attempt - 1));
        taskScheduler.schedule(new RetryTask(operationId), new Date(System.currentTimeMillis() + delayMs));
    }
}
Retry Task:
java

Collapse

Wrap

Copy
public class RetryTask implements Runnable {
    private final String operationId;

    public RetryTask(String operationId) {
        this.operationId = operationId;
    }

    @Override
    public void run() {
        RetryRecord record = retryRepository.findByOperationId(operationId);
        if (record != null && record.getStatus().equals("PENDING_RETRY")) {
            try {
                Record originalRecord = entityManager.find(Record.class, Long.valueOf(operationId));
                callExternalApi(originalRecord); // Retry the API call
            } catch (Exception e) {
                ApplicationEventPublisher eventPublisher = ApplicationContextProvider.getBean(ApplicationEventPublisher.class);
                eventPublisher.publishEvent(new MethodFailureEvent(operationId, e.getMessage(), e));
            }
        }
    }
}
Unexpected Detail: This approach allows parallel processing of multiple operations, improving system throughput by not blocking threads during delays, which is particularly useful at 08:35 AM PDT on Monday, March 24, 2025, during peak business hours.
Integration
Ensure RetryRecord stores enough data to reconstruct the request, such as the operation ID mapping to the original record. Use events to handle status changes and API calls, ensuring retries are scheduled without blocking.

Comprehensive Analysis of Asynchronous Retry Mechanisms in Spring Boot
Introduction
The requirement to implement a retry mechanism for external API calls without blocking threads for extended periods, especially with exponential backoff delays (15 minutes initially, doubling to 30, 60 minutes, for up to 3 attempts total), aligns with enhancing the resilience and efficiency of Spring Boot applications. The manager’s directive to “fail gracefully” and release threads immediately after failure, leveraging database updates for retry tracking, suggests a shift from synchronous blocking retries to asynchronous scheduling. This analysis explores the implementation using Spring’s TaskScheduler, focusing on how it integrates with the user’s existing flow of polling for "PENDING" records, publishing events, subscribing to change status to "INPROGRESS," and handling API failures with retries.

The user’s initial setup involves fetchPendingRecords() polling every 10 seconds to fetch "PENDING" records, publishing them as PendingRecordsEvent, and another method subscribing to change the status to "INPROGRESS" and calling the external API via RestTemplate, which may fail. The challenge is to ensure that upon failure, retries are handled asynchronously, updating the database, and failing gracefully without long thread blocks. This report details the implementation, evaluates its suitability, and provides insights into database interactions and state management.

Understanding the Retry Scenario
The user’s setup involves:

Polling every 10 seconds for "PENDING" records using fetchPendingRecords(), publishing PendingRecordsEvent.
Subscribing to the event, changing status to "INPROGRESS," and calling an external API, which may fail.
Upon failure, the system should retry up to 3 times (initial attempt + 2 retries), with delays of 15 minutes, then 30 minutes, then 60 minutes, potentially blocking threads for up to 105 minutes (1 hour 45 minutes).
The manager’s concern is that blocking a thread for such durations is unacceptable, especially in a server environment where threads are limited. Instead, the system should release the thread after each failure, schedule retries asynchronously, and rely on database updates (via RetryRecord) to track state, ensuring graceful failure.
The flow starts with polling for "PENDING" records, publishing events, and subscribing to change status to "INPROGRESS" before API calls. When the API call fails, we need to schedule retries using TaskScheduler, ensuring the thread is released and database updates track retry attempts. This requires integrating the retry mechanism with the existing event-driven flow, ensuring state consistency and handling concurrent operations.

Implementing Asynchronous Retries with TaskScheduler
To address this, let’s break down the implementation:

Define the Retry Record: Create a database entity (RetryRecord) to track retry attempts for each operation, including operation ID, attempt count, last error, last attempt time, and status.
java

Collapse

Wrap

Copy
import jakarta.persistence.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "retry_records")
public class RetryRecord {
    @Id
    private String operationId;
    private int attempts = 0;
    private String lastError;
    private LocalDateTime lastAttemptTime;
    private String status;

    // Getters and Setters
    public String getOperationId() { return operationId; }
    public void setOperationId(String operationId) { this.operationId = operationId; }
    public int getAttempts() { return attempts; }
    public void setAttempts(int attempts) { this.attempts = attempts; }
    public String getLastError() { return lastError; }
    public void setLastError(String lastError) { this.lastError = lastError; }
    public LocalDateTime getLastAttemptTime() { return lastAttemptTime; }
    public void setLastAttemptTime(LocalDateTime lastAttemptTime) { this.lastAttemptTime = lastAttemptTime; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
}
Repository for Retry Record: Use Spring Data JPA to interact with RetryRecord.
java

Collapse

Wrap

Copy
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface RetryRepository extends JpaRepository<RetryRecord, String> {
    Optional<RetryRecord> findByOperationId(String operationId);
}
Event Definition: Create a custom event (MethodFailureEvent) to capture failure details, including operation ID, error message, and exception.
java

Collapse

Wrap

Copy
public class MethodFailureEvent {
    private final String operationId;
    private final String errorMessage;
    private final Throwable exception;

    public MethodFailureEvent(String operationId, String errorMessage, Throwable exception) {
        this.operationId = operationId;
        this.errorMessage = errorMessage;
        this.exception = exception;
    }

    // Getters
    public String getOperationId() { return operationId; }
    public String getErrorMessage() { return errorMessage; }
    public Throwable getException() { return exception; }
}
Initial Polling and Publishing: Implement fetchPendingRecords() to poll every 10 seconds and publish events for "PENDING" records.
java

Collapse

Wrap

Copy
@Service
public class StatusUpdateService {
    @PersistenceContext
    private EntityManager entityManager;

    @Autowired
    private ApplicationEventPublisher eventPublisher;

    @Scheduled(fixedRate = 10000)
    @Async
    @Transactional
    public void fetchPendingRecords() {
        List<Record> pendingRecords = entityManager.createQuery("SELECT r FROM Record r WHERE r.status = :status", Record.class)
                .setParameter("status", "PENDING")
                .getResultList();
        if (!pendingRecords.isEmpty()) {
            eventPublisher.publishEvent(new PendingRecordsEvent(this, pendingRecords));
        }
    }
}
Subscribe and Change Status to "INPROGRESS": Implement a subscriber to handle PendingRecordsEvent, change status to "INPROGRESS," and call the external API.
java

Collapse

Wrap

Copy
@Component
public class RecordProcessor {
    @PersistenceContext
    private EntityManager entityManager;

    @Autowired
    private ApplicationEventPublisher eventPublisher;

    @EventListener
    @Async
    @Transactional
    public void handlePendingRecords(PendingRecordsEvent event) {
        List<Record> records = event.getRecords();
        for (Record record : records) {
            record.setStatus("INPROGRESS");
            entityManager.merge(record);
            try {
                callExternalApi(record); // This might fail
            } catch (Exception e) {
                eventPublisher.publishEvent(new MethodFailureEvent(record.getId().toString(), e.getMessage(), e));
            }
        }
    }

    private void callExternalApi(Record record) {
        // Assume this calls RestTemplate to external API
        // For example:
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>("request data", headers);
        ResponseEntity<String> response = restTemplate.exchange(
            "http://external-api.com/endpoint",
            HttpMethod.POST,
            entity,
            String.class
        );
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("API call failed: " + response.getStatusCode());
        }
    }
}
Configure TaskScheduler: Add a bean for ThreadPoolTaskScheduler to manage retry tasks.
java

Collapse

Wrap

Copy
@Configuration
public class SchedulingConfig {
    @Bean
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(5);
        scheduler.setThreadNamePrefix("retryScheduler-");
        scheduler.initialize();
        return scheduler;
    }
}
Event Handler for Retries: Implement FailureEventHandler to handle MethodFailureEvent, update the database, and schedule retries.
java

Collapse

Wrap

Copy
@Component
public class FailureEventHandler {
    @Autowired
    private RetryRepository retryRepository;
    @Autowired
    private ThreadPoolTaskScheduler taskScheduler;

    @EventListener
    @Transactional
    public void handleFailureEvent(MethodFailureEvent event) {
        RetryRecord record = retryRepository.findByOperationId(event.getOperationId())
                .orElse(new RetryRecord(event.getOperationId()));
        record.setAttempts(record.getAttempts() + 1);
        record.setLastError(event.getErrorMessage());
        record.setLastAttemptTime(LocalDateTime.now());
        if (record.getAttempts() < 3) { // Max 3 attempts total
            record.setStatus("PENDING_RETRY");
            scheduleNextRetry(event.getOperationId(), record.getAttempts());
        } else {
            record.setStatus("FAILED");
        }
        retryRepository.save(record);
    }

    private void scheduleNextRetry(String operationId, int attempt) {
        long initialDelayMs = 15 * 60 * 1000; // 15 minutes
        double multiplier = 2.0;
        long delayMs = (long) (initialDelayMs * Math.pow(multiplier, attempt - 1));
        taskScheduler.schedule(new RetryTask(operationId), new Date(System.currentTimeMillis() + delayMs));
    }
}
Retry Task: Implement RetryTask to retrieve the record and retry the API call.
java

Collapse

Wrap

Copy
public class RetryTask implements Runnable {
    private final String operationId;

    public RetryTask(String operationId) {
        this.operationId = operationId;
    }

    @Override
    public void run() {
        RetryRecord record = retryRepository.findByOperationId(operationId);
        if (record != null && record.getStatus().equals("PENDING_RETRY")) {
            try {
                Record originalRecord = entityManager.find(Record.class, Long.valueOf(operationId));
                RecordProcessor processor = ApplicationContextProvider.getBean(RecordProcessor.class);
                processor.callExternalApi(originalRecord); // Retry the API call
            } catch (Exception e) {
                ApplicationEventPublisher eventPublisher = ApplicationContextProvider.getBean(ApplicationEventPublisher.class);
                eventPublisher.publishEvent(new MethodFailureEvent(operationId, e.getMessage(), e));
            }
        }
    }
}
When and How "Pending Retry" is Called
