import com.sc.lc.preprocessor.exception.ELCGraphQLException;
import graphql.execution.DataFetcherResult;
import graphql.execution.DataFetcherExceptionHandlerParameters;
import graphql.execution.DataFetcherExceptionHandlerResult;
import graphql.execution.DataFetchingEnvironment;
import graphql.execution.ResultPath;
import graphql.execution.DataFetcherExceptionResolverAdapter;
import org.springframework.graphql.execution.ErrorType;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class GlobalExceptionHandler extends DataFetcherExceptionResolverAdapter {

    @Override
    protected DataFetcherExceptionHandlerResult handleException(DataFetcherExceptionHandlerParameters handlerParameters) {
        Throwable exception = handlerParameters.getException();
        DataFetchingEnvironment environment = handlerParameters.getEnvironment();

        if (exception instanceof ELCGraphQLException) {
            ELCGraphQLException elcEx = (ELCGraphQLException) exception;
            Object responseData = elcEx.getResponse();

            // Return a DataFetcherResult with the custom object in the data field
            DataFetcherResult<Object> result = DataFetcherResult.<Object>newResult()
                    .data(responseData)
                    .build();

            return DataFetcherExceptionHandlerResult.newResultResult()
                    .data(result.getData())
                    .errors(result.getErrors())
                    .build();
        }

        return super.handleException(handlerParameters);
    }
}
