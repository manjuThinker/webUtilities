<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Parent Project Info -->
    <groupId>com.yourcompany</groupId>
    <artifactId>parent-project</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Parent Project</name>

    <modules>
        <module>core</module>
        <module>services</module>
    </modules>

    <!-- Properties -->
    <properties>
        <java.version>17</java.version>
        <spring-boot.version>3.1.0</spring-boot.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- Dependency Management -->
    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot BOM -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- Build Configuration -->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <!-- Profile for Module Activation -->
    <profiles>
        <profile>
            <id>core</id>
            <activation>
                <property>
                    <name>!skipCore</name>
                </activation>
            </activation>
        </profile>
        <profile>
            <id>services</id>
            <activation>
                <property>
                    <name>!skipServices</name>
                </activation>
            </activation>
        </profile>
    </profiles>
</project>

...










import javax.servlet.http.HttpServletRequestWrapper;
import java.io.*;

public class CustomHttpServletRequestWrapper extends HttpServletRequestWrapper {

    private final byte[] body;

    public CustomHttpServletRequestWrapper(HttpServletRequest request) throws IOException {
        super(request);
        // Read and buffer the request body
        StringBuilder stringBuilder = new StringBuilder();
        try (BufferedReader reader = request.getReader()) {
            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
        }
        body = stringBuilder.toString().getBytes("UTF-8");
    }

    @Override
    public ServletInputStream getInputStream() throws IOException {
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body);
        return new ServletInputStream() {
            @Override
            public boolean isFinished() {
                return byteArrayInputStream.available() == 0;
            }

            @Override
            public boolean isReady() {
                return true;
            }

            @Override
            public void setReadListener(ReadListener readListener) {
                // No-op
            }

            @Override
            public int read() throws IOException {
                return byteArrayInputStream.read();
            }
        };
    }

    @Override
    public BufferedReader getReader() throws IOException {
        return new BufferedReader(new InputStreamReader(getInputStream()));
    }

    public String getBody() {
        return new String(body, StandardCharsets.UTF_8);
    }
}

===========================

import com.fasterxml.jackson.databind.ObjectMapper;
import graphql.schema.DataFetcher;
import org.springframework.graphql.server.WebGraphQlInterceptor;
import org.springframework.graphql.server.WebGraphQlRequest;
import org.springframework.graphql.server.WebGraphQlResponse;
import org.springframework.stereotype.Component;

import java.lang.reflect.Method;
import java.util.UUID;

@Component
public class ClientHashWebGraphQlInterceptor implements WebGraphQlInterceptor {

    private final ClientHashValidator hashValidator;
    private final ObjectMapper objectMapper;

    public ClientHashWebGraphQlInterceptor(ClientHashValidator hashValidator, ObjectMapper objectMapper) {
        this.hashValidator = hashValidator;
        this.objectMapper = objectMapper;
    }

    @Override
    public WebGraphQlResponse intercept(WebGraphQlRequest request, Chain chain) {
        String requestId = UUID.randomUUID().toString();
        request.getAttributes().put("requestId", requestId);

        // Get request body
        CustomHttpServletRequestWrapper wrappedRequest;
        try {
            wrappedRequest = new CustomHttpServletRequestWrapper(request.getHttpRequest());
        } catch (Exception e) {
            throw new ClientHashValidationException("Failed to read request body: " + e.getMessage(), HttpStatus.BAD_REQUEST);
        }

        String requestBody = wrappedRequest.getBody();
        if (requestBody.isEmpty()) {
            throw new ClientHashValidationException("Request body is empty (ID: " + requestId + ")", HttpStatus.BAD_REQUEST);
        }

        // Check if any operation targets a method with @ValidateClientHash
        boolean requiresValidation = request.getDocumentInfo().getOperations().stream()
                .anyMatch(op -> {
                    String fieldName = op.getName();
                    DataFetcher<?> dataFetcher = request.getExecutionInput().getGraphQLContext()
                            .get("dataFetcher:" + fieldName);
                    if (dataFetcher != null) {
                        try {
                            Method method = dataFetcher.getClass().getMethod("get", DataFetchingEnvironment.class);
                            return method.isAnnotationPresent(ValidateClientHash.class);
                        } catch (NoSuchMethodException e) {
                            return false;
                        }
                    }
                    return false;
                });

        if (!requiresValidation) {
            return chain.next(request);
        }

        // Validate clientHash
        try {
            hashValidator.validateHash(objectMapper.readTree(requestBody));
        } catch (ClientHashValidationException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientHashValidationException("Validation error: " + e.getMessage(), HttpStatus.BAD_REQUEST);
        }

        return chain.next(request);
    }
}

======================


import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.util.UUID;

public abstract class BaseGraphQlController {

    private final ClientHashValidator hashValidator;
    private final ObjectMapper objectMapper;

    protected BaseGraphQlController(ClientHashValidator hashValidator, ObjectMapper objectMapper) {
        this.hashValidator = hashValidator;
        this.objectMapper = objectMapper;
    }

    protected void validateClientHash() throws ClientHashValidationException {
        String uuid = UUID.randomUUID().toString();

        // Get HttpServletRequest
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attributes == null) {
            throw new ClientHashValidationException("HttpServletRequest not available (ID: " + uuid + ")", HttpStatus.BAD_REQUEST);
        }
        HttpServletRequest httpRequest = attributes.getRequest();

        // Wrap request body
        CustomHttpServletRequestWrapper wrappedRequest;
        try {
            wrappedRequest = new CustomHttpServletRequestWrapper(httpRequest);
        } catch (Exception e) {
            throw new ClientHashValidationException("Failed to read request body: " + e.getMessage() + " (ID: " + uuid + ")", HttpStatus.BAD_REQUEST);
        }

        String requestBody = wrappedRequest.getBody();
        if (requestBody.isEmpty()) {
            throw new ClientHashValidationException("Request body is empty (ID: " + uuid + ")", HttpStatus.BAD_REQUEST);
        }

        // Validate clientHash
        try {
            hashValidator.validateHash(objectMapper.readTree(requestBody));
        } catch (ClientHashValidationException e) {
            throw e;
        } catch (Exception e) {
            throw new ClientHashValidationException("Validation error: " + e.getMessage() + " (ID: " + uuid + ")", HttpStatus.BAD_REQUEST);
        }
    }
}

======================

return chain.next(request).doOnNext(response -> {
            // Get the execution result
            response.getExecutionResult().ifAvailable(executionResult -> {
                // Access the handler method through execution context
                executionResult.getExtensions().ifPresent(extensions -> {
                    if (extensions.containsKey("handlerMethod")) {
                        HandlerMethod handler = (HandlerMethod) extensions.get("handlerMethod");
                        System.out.println("Controller class: " + handler.getBeanType().getSimpleName());
                        System.out.println("Method name: " + handler.getMethod().getName());
                    }
                });
            });
        });

====================
import graphql.execution.instrumentation.InstrumentationContext;
import graphql.execution.instrumentation.SimpleInstrumentation;
import graphql.execution.instrumentation.parameters.InstrumentationExecuteOperationParameters;
import org.springframework.graphql.data.method.HandlerMethod;
import org.springframework.stereotype.Component;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class PreExecutionMethodInstrumentation extends SimpleInstrumentation {
    
    private static final Map<String, HandlerMethod> executionHandlers = new ConcurrentHashMap<>();

    @Override
    public InstrumentationContext<ExecutionResult> beginExecuteOperation(InstrumentationExecuteOperationParameters parameters) {
        // This is called before operation execution starts
        parameters.getExecutionContext().getDataFetchers().values().stream()
            .filter(HandlerMethod.class::isInstance)
            .findFirst()
            .ifPresent(handler -> {
                executionHandlers.put(
                    parameters.getExecutionInput().getExecutionId().toString(),
                    (HandlerMethod) handler
                );
            });
        
        return super.beginExecuteOperation(parameters);
    }

    public static HandlerMethod getHandlerForExecution(String executionId) {
        return executionHandlers.get(executionId);
    }

    @Override
    public InstrumentationContext<Object> beginFieldFetch(InstrumentationFieldFetchParameters parameters) {
        // Clean up after field execution
        return super.beginFieldFetch(parameters).whenComplete((result, ex) -> {
            executionHandlers.remove(parameters.getExecutionStepInfo().getExecutionId().toString());
        });
    }
}
