@ExtendWith(MockitoExtension.class)
class ELCInProgressServiceTest {

    @InjectMocks
    private ELCInProgressService elcInProgressService;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private FfiMasterCustomRepository ffiMasterCustomRepository;
    
    @Mock
    private CodeDecodeService codeDecodeService;
    
    private SCELCMapper scelcMapper;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(elcInProgressService, "elcInProgressUrl", "http://test-url.com/api");
        scelcMapper = new SCELCMapper();
        scelcMapper.setCodeDecodeService(codeDecodeService);
    }

    @Test
    void getInProgressdetailsList_Success() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        TxnSummaryResponse response = new TxnSummaryResponse();
        TxnSummaryResponse.TxnSummary txnSummary = response.new TxnSummary();
        txnSummary.setCountryCode(TXCountry.of(TXCountryCode.valueOf("SP")));
        txnSummary.setAttachmentCount(TXBigDecimalValue.of(new BigDecimal(1)));
        response.setTxnSummary(txnSummary);
        apiResponseList.add(response);

        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        TXFFIHistoryDtlsEntity historyEntity1 = createHistoryEntity("abx", "1253", "U44SD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        
        historyEntities.add(historyEntity);
        historyEntities.add(historyEntity1);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        Sort sort = Sort.by("dealRefNo").ascending()
                .and(Sort.by("counterPartyName").ascending())
                .and(Sort.by("customerName").ascending())
                .and(Sort.by("currency").ascending())
                .and(Sort.by("amount").ascending())
                .and(Sort.by("transactionType").ascending())
                .and(Sort.by("lstStepStatus").ascending())
                .and(Sort.by("availableBalance").ascending())
                .and(Sort.by("lastModifiedDatetime").descending())
                .and(Sort.by("expiryDate").ascending());
        Pageable pageable = PageRequest.of(0, 10, sort);

        FilterForm filterForm = new FilterForm();
        filterForm.setLastModDate(Arrays.asList(
                "2025-03-22T00:00:00Z",
                "2025-03-22T00:00:00Z"
        ));
        filterForm.setExpireDate(Arrays.asList(
                "2025-03-22T00:00:00Z",
                "2025-03-22T00:00:00Z"
        ));
        filterForm.setLcAmount(Arrays.asList("1000", "2000"));
        filterForm.setBankRef(List.of("123"));
        filterForm.setCcy(List.of("USD"));
        filterForm.setBeneficiaryName(List.of("BeneficiaryA"));
        filterForm.setApplicantName(List.of("ApplicantA"));
        filterForm.setLstStepType(List.of("STEP1"));

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm, userId, groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.getTransactionStatus());
    }
    
    @Test
    void getInProgressdetailsList_WithNullFilters() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        TxnSummaryResponse response = new TxnSummaryResponse();
        TxnSummaryResponse.TxnSummary txnSummary = response.new TxnSummary();
        txnSummary.setCountryCode(TXCountry.of(TXCountryCode.valueOf("SP")));
        txnSummary.setAttachmentCount(TXBigDecimalValue.of(new BigDecimal(1)));
        response.setTxnSummary(txnSummary);
        apiResponseList.add(response);

        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        Pageable pageable = PageRequest.of(0, 10);

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, null, userId, groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.getTransactionStatus());
    }
    
    @Test
    void getInProgressdetailsList_WithNullSorting() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response with empty list
        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(Collections.emptyList());

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        // Create pageable with null sort
        Pageable pageable = PageRequest.of(0, 10, Sort.unsorted());
        
        FilterForm filterForm = new FilterForm();

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm, userId, groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.getTransactionStatus());
    }
    
    @Test
    void getInProgressdetailsList_WithInvalidPageNumber() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        TxnSummaryResponse response = new TxnSummaryResponse();
        TxnSummaryResponse.TxnSummary txnSummary = response.new TxnSummary();
        txnSummary.setCountryCode(TXCountry.of(TXCountryCode.valueOf("SP")));
        txnSummary.setAttachmentCount(TXBigDecimalValue.of(new BigDecimal(1)));
        response.setTxnSummary(txnSummary);
        apiResponseList.add(response);

        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        // Create pageable with a very high page number
        Pageable pageable = PageRequest.of(100, 10);
        
        FilterForm filterForm = new FilterForm();

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm, userId, groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.getTransactionStatus());
        assertEquals(0, result.getTxElcMasterDtls().size());
    }
    
    @Test
    void getInProgressdetailsList_WithAllFilters() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response with data that matches all filter criteria
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1500);
        historyEntity.setBeneficiaryName("BeneficiaryA");
        historyEntity.setApplicantName("ApplicantA");
        historyEntity.setLastStepType("STEP1");
        historyEntity.setLastStepStatus("Status1");
        historyEntity.setAvailableBalance(new BigDecimal("1400"));
        
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        Sort sort = Sort.by("dealRefNo").ascending();
        Pageable pageable = PageRequest.of(0, 10, sort);

        // Create filter form with all possible filters
        FilterForm filterForm = new FilterForm();
        filterForm.setLastModDate(Arrays.asList(
                "2025-03-21T00:00:00Z",
                "2025-03-23T00:00:00Z"
        ));
        filterForm.setExpireDate(Arrays.asList(
                "2025-03-21T00:00:00Z",
                "2025-03-23T00:00:00Z"
        ));
        filterForm.setLcAmount(Arrays.asList("1000", "2000"));
        filterForm.setBankRef(List.of("123"));
        filterForm.setCcy(List.of("USD"));
        filterForm.setBeneficiaryName(List.of("BeneficiaryA"));
        filterForm.setApplicantName(List.of("ApplicantA"));
        filterForm.setLstStepType(List.of("STEP1"));

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm, userId, groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.getTransactionStatus());
    }
    
    @Test
    void getInProgressdetailsList_WithNullFilterValues() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        Pageable pageable = PageRequest.of(0, 10);

        // Create filter form with empty values
        FilterForm filterForm = new FilterForm();
        filterForm.setLastModDate(Collections.emptyList());
        filterForm.setExpireDate(Collections.emptyList());
        filterForm.setLcAmount(Arrays.asList("", ""));
        filterForm.setBankRef(Collections.emptyList());
        filterForm.setCcy(Collections.emptyList());
        filterForm.setBeneficiaryName(Collections.emptyList());
        filterForm.setApplicantName(Collections.emptyList());
        filterForm.setLstStepType(Collections.emptyList());

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm, userId, groupId);

        // Assert
        assertNotNull(result);
        assertTrue(result.getTransactionStatus());
    }
    
    @Test
    void getInProgressdetailsList_WithOnlyLcAmountFilter() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1500);
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        Pageable pageable = PageRequest.of(0, 10);

        // Test different LC amount filter scenarios
        // 1. Start amount only
        FilterForm filterForm1 = new FilterForm();
        filterForm1.setLcAmount(Arrays.asList("1000", ""));
        
        TXELCMasterDtlsResponse result1 = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm1, userId, groupId);
        
        // 2. End amount only
        FilterForm filterForm2 = new FilterForm();
        filterForm2.setLcAmount(Arrays.asList("", "2000"));
        
        TXELCMasterDtlsResponse result2 = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm2, userId, groupId);
        
        // 3. Both start and end amount
        FilterForm filterForm3 = new FilterForm();
        filterForm3.setLcAmount(Arrays.asList("1000", "2000"));
        
        TXELCMasterDtlsResponse result3 = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm3, userId, groupId);
        
        // 4. Zero start amount
        FilterForm filterForm4 = new FilterForm();
        filterForm4.setLcAmount(Arrays.asList("0", "2000"));
        
        TXELCMasterDtlsResponse result4 = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm4, userId, groupId);

        // Assert
        assertNotNull(result1);
        assertNotNull(result2);
        assertNotNull(result3);
        assertNotNull(result4);
    }

    @Test
    void getInProgressdetailsList_InvalidDateFormat() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        TXFFIHistoryDtlsEntity historyEntity = createHistoryEntity("CNF", "123", "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000);
        historyEntities.add(historyEntity);

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        Pageable pageable = PageRequest.of(0, 10);

        // Create filter form with invalid date format
        FilterForm filterForm = new FilterForm();
        filterForm.setLastModDate(Arrays.asList(
                "invalid-date-format",
                "2025-03-22T00:00:00Z"
        ));
        filterForm.setExpireDate(Arrays.asList(
                "invalid-date-format",
                "2025-03-22T00:00:00Z"
        ));

        TXELCMasterDtlsResponse result = elcInProgressService.getInProgressdetailsList(
                customerCountryMap, pageable, filterForm, userId, groupId);

        // Assert
        assertNotNull(result);
    }
    
    @Test
    void getInProgressdetailsList_TestAllSortFields() {
        when(codeDecodeService.getcodeDescrptionMap()).thenReturn(CodeDecodeTableDataStatic.getCodeDecodeMap());

        // Create test data
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";
        
        // Mock external API response
        List<TxnSummaryResponse> apiResponseList = new ArrayList<>();
        ResponseEntity<List<TxnSummaryResponse>> responseEntity =
                ResponseEntity.ok(apiResponseList);

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenReturn(responseEntity);

        // Mock repository response
        List<TXFFIHistoryDtlsEntity> historyEntities = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            TXFFIHistoryDtlsEntity entity = createHistoryEntity("CNF" + i, "123" + i, "USD", "SNDTOBK", "2025-03-22T00:00:00Z", 1000 + i);
            entity.setBeneficiaryName("Beneficiary" + i);
            entity.setApplicantName("Applicant" + i);
            entity.setLastStepType("Step" + i);
            entity.setLastStepStatus("Status" + i);
            entity.setAvailableBalance(new BigDecimal(900 + i));
            historyEntities.add(entity);
        }

        when(ffiMasterCustomRepository.findByCustomerIDAndGenericField(
                eq(TXFFIHistoryDtlsEntity.class),
                any(Map.class),
                eq(customerCountryMap)
        )).thenReturn(historyEntities);

        // Test each sort field individually
        String[] sortFields = {
            "dealRefNo", "counterPartyName", "customerName", "currency", "amount", 
            "transactionType", "lstStepStatus", "availableBalance", "lastModifiedDatetime", 
            "expiryDate", "unknownField"
        };
        
        for (String field : sortFields) {
            // Test ascending
            Sort sortAsc = Sort.by(field).ascending();
            Pageable pageableAsc = PageRequest.of(0, 10, sortAsc);
            
            TXELCMasterDtlsResponse resultAsc = elcInProgressService.getInProgressdetailsList(
                    customerCountryMap, pageableAsc, null, userId, groupId);
            
            // Test descending
            Sort sortDesc = Sort.by(field).descending();
            Pageable pageableDesc = PageRequest.of(0, 10, sortDesc);
            
            TXELCMasterDtlsResponse resultDesc = elcInProgressService.getInProgressdetailsList(
                    customerCountryMap, pageableDesc, null, userId, groupId);
            
            // Assert
            assertNotNull(resultAsc);
            assertNotNull(resultDesc);
        }
    }

    @Test
    void getInProgressdetailsList_Exception() {
        Map<String, String> customerCountryMap = Map.of("customerId", "AE", "country", "AE");
        String userId = "user1";
        String groupId = "group1";

        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                any(ParameterizedTypeReference.class)
        )).thenThrow(new HttpClientErrorException(HttpStatusCode.valueOf(500)));

        Sort sort = Sort.by("dealRefNo").ascending();
        Pageable pageable = PageRequest.of(0, 10, sort);

        Exception exception = assertThrows(SCException.class, () -> {
            elcInProgressService.getInProgressdetailsList(
                    customerCountryMap, pageable, new FilterForm(), userId, groupId);
        });
        // Check that the correct exception message is returned
        assertEquals("org.springframework.web.client.HttpClientErrorException: 500 INTERNAL_SERVER_ERROR", exception.getMessage());
    }

    private TXFFIHistoryDtlsEntity createHistoryEntity(String transactionType, String dealRefNo, 
                                                    String currency, String workflowStatus, 
                                                    String dateTimeStr, int amount) {
        TXFFIHistoryDtlsEntity entity = new TXFFIHistoryDtlsEntity();
        entity.setTransactionType(transactionType);
        entity.setDealRefNo(dealRefNo);
        entity.setCurrency(currency);
        entity.setCustomerWorkflowStatus(workflowStatus);
        
        Instant specificDate = Instant.parse(dateTimeStr);
        entity.setExpiryDate(Timestamp.from(specificDate));
        entity.setLastModifiedDatetime(Timestamp.from(specificDate));
        entity.setAmount(new BigDecimal(amount));
        
        return entity;
    }
    
    private CombinedInProgressData createMockCombinedData() {
        CombinedInProgressData data = new CombinedInProgressData();
        data.setBankRef("RefNo123");
        data.setBeneficiaryName("TestBeneficiary");
        data.setApplicantName("TestApplicant");
        data.setCcy("USD");
        data.setLcAmount(BigDecimal.valueOf(1000));
        data.setLstStepType("PROC");
        data.setLstStepStatus("ACTIVE");
        data.setAvailableBalance(BigDecimal.valueOf(900));
        data.setLastModDate(Timestamp.from(Instant.now()));
        data.setExpireDate(Timestamp.from(Instant.parse("2023-01-01T00:00:00Z")));
        return data;
    }
}
